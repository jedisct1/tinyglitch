// This file was automatically generated by zig-witx - Do not edit manually.

pub const handle = i32;
pub const char = u8;

// fastly_status
pub const fastly_status = enum(u32) {
    OK = 0,
    ERROR = 1,
    INVAL = 2,
    BADF = 3,
    BUFLEN = 4,
    UNSUPPORTED = 5,
    BADALIGN = 6,
    HTTPPARSE = 7,
    HTTPUSER = 8,
    HTTPINCOMPLETE = 9,
    NONE = 10,
};

// http_version
pub const http_version = enum(u32) {
    HTTP_09 = 0,
    HTTP_10 = 1,
    HTTP_11 = 2,
    H2 = 3,
    H3 = 4,
};

// http_status
pub const http_status = u16;

// body_write_end
pub const body_write_end = enum(u32) {
    BACK = 0,
    FRONT = 1,
};

// body_handle
pub const body_handle = handle;

// request_handle
pub const request_handle = handle;

// response_handle
pub const response_handle = handle;

// pending_request_handle
pub const pending_request_handle = handle;

// endpoint_handle
pub const endpoint_handle = handle;

// dictionary_handle
pub const dictionary_handle = handle;

// multi_value_cursor
pub const multi_value_cursor = u32;

// -1 represents "finished", non-negative represents a $multi_value_cursor:
pub const multi_value_cursor_result = i64;

// cache_override_tag
pub const cache_override_tag = u32;
pub const cache_override_tag_bits = struct {
    pub const NONE: cache_override_tag = 1;
    pub const PASS: cache_override_tag = 2;
    pub const TTL: cache_override_tag = 4;
    pub const STALE_WHILE_REVALIDATE: cache_override_tag = 8;
    pub const PCI: cache_override_tag = 16;
};

// ----------------------[fastly_abi]----------------------

pub const mod_fastly_abi = struct {
    // init
    // in:  abi_version
    // out: err
    pub extern "fastly_abi" fn init(abi_version: u64) callconv(.C) fastly_status;
};

// ----------------------[fastly_uap]----------------------

pub const mod_fastly_uap = struct {
    // parse
    // in:  user_agent, family, family_len, family_nwritten_out, major, major_len, major_nwritten_out, minor, minor_len, minor_nwritten_out, patch, patch_len, patch_nwritten_out
    // out: err
    pub extern "fastly_uap" fn parse(user_agent_ptr: [*]const char, user_agent_len: usize, family: [*]char, family_len: usize, family_nwritten_out: *usize, major: [*]char, major_len: usize, major_nwritten_out: *usize, minor: [*]char, minor_len: usize, minor_nwritten_out: *usize, patch: [*]char, patch_len: usize, patch_nwritten_out: *usize) callconv(.C) fastly_status;
};

// ----------------------[fastly_http_body]----------------------

pub const mod_fastly_http_body = struct {
    // append
    // in:  dest, src
    // out: err
    pub extern "fastly_http_body" fn append(dest: body_handle, src: body_handle) callconv(.C) fastly_status;

    // new
    // in:
    // out: err, h
    pub extern "fastly_http_body" fn new(h_ptr: *body_handle) callconv(.C) fastly_status;

    // read
    // in:  h, buf, buf_len
    // out: err, nread
    pub extern "fastly_http_body" fn read(h: body_handle, buf: [*]u8, buf_len: usize, nread_ptr: *usize) callconv(.C) fastly_status;

    // write
    // in:  h, buf, end
    // out: err, nwritten
    pub extern "fastly_http_body" fn write(h: body_handle, buf_ptr: [*]const u8, buf_count: usize, end: body_write_end, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // close
    // in:  h
    // out: err
    pub extern "fastly_http_body" fn close(h: body_handle) callconv(.C) fastly_status;
};

// ----------------------[fastly_log]----------------------

pub const mod_fastly_log = struct {
    // endpoint_get
    // in:  name
    // out: err, endpoint_handle_out
    pub extern "fastly_log" fn endpoint_get(name_ptr: [*]const u8, name_count: usize, endpoint_handle_out_ptr: *endpoint_handle) callconv(.C) fastly_status;

    // write
    // in:  h, msg
    // out: err, nwritten_out
    pub extern "fastly_log" fn write(h: endpoint_handle, msg_ptr: [*]const u8, msg_count: usize, nwritten_out_ptr: *usize) callconv(.C) fastly_status;
};

// ----------------------[fastly_http_req]----------------------

pub const mod_fastly_http_req = struct {
    // body_downstream_get
    // in:
    // out: err, req, body
    pub extern "fastly_http_req" fn body_downstream_get(req_ptr: *request_handle, body_ptr: *body_handle) callconv(.C) fastly_status;

    // cache_override_set
    // in:  h, tag, ttl, stale_while_revalidate
    // out: err
    pub extern "fastly_http_req" fn cache_override_set(h: request_handle, tag: cache_override_tag, ttl: u32, stale_while_revalidate: u32) callconv(.C) fastly_status;

    // cache_override_v2_set
    // in:  h, tag, ttl, stale_while_revalidate, sk
    // out: err
    pub extern "fastly_http_req" fn cache_override_v2_set(h: request_handle, tag: cache_override_tag, ttl: u32, stale_while_revalidate: u32, sk_ptr: [*]const u8, sk_count: usize) callconv(.C) fastly_status;

    // downstream_client_ip_addr
    // in:  addr_octets_out
    // out: err, nwritten_out
    pub extern "fastly_http_req" fn downstream_client_ip_addr(addr_octets_out: [*]char, nwritten_out_ptr: *usize) callconv(.C) fastly_status;

    // downstream_tls_cipher_openssl_name
    // in:  cipher_out, cipher_max_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn downstream_tls_cipher_openssl_name(cipher_out: [*]char, cipher_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // downstream_tls_protocol
    // in:  protocol_out, protocol_max_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn downstream_tls_protocol(protocol_out: [*]char, protocol_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // downstream_tls_client_hello
    // in:  chello_out, chello_max_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn downstream_tls_client_hello(chello_out: [*]char, chello_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // new
    // in:
    // out: err, h
    pub extern "fastly_http_req" fn new(h_ptr: *request_handle) callconv(.C) fastly_status;

    // header_names_get
    // in:  h, buf, buf_len, cursor, ending_cursor_out, nwritten_out
    // out: err
    pub extern "fastly_http_req" fn header_names_get(h: request_handle, buf: [*]char, buf_len: usize, cursor: multi_value_cursor, ending_cursor_out: *i64, nwritten_out: *usize) callconv(.C) fastly_status;

    // original_header_names_get
    // in:  buf, buf_len, cursor, ending_cursor_out, nwritten_out
    // out: err
    pub extern "fastly_http_req" fn original_header_names_get(buf: [*]char, buf_len: usize, cursor: multi_value_cursor, ending_cursor_out: *i64, nwritten_out: *usize) callconv(.C) fastly_status;

    // original_header_count
    // in:
    // out: err, count
    pub extern "fastly_http_req" fn original_header_count(count_ptr: *u32) callconv(.C) fastly_status;

    // header_value_get
    // in:  h, name, value, value_max_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn header_value_get(h: request_handle, name_ptr: [*]const u8, name_count: usize, value: [*]char, value_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // header_values_get
    // in:  h, name, buf, buf_len, cursor, ending_cursor_out, nwritten_out
    // out: err
    pub extern "fastly_http_req" fn header_values_get(h: request_handle, name_ptr: [*]const u8, name_count: usize, buf: [*]char, buf_len: usize, cursor: multi_value_cursor, ending_cursor_out: *i64, nwritten_out: *usize) callconv(.C) fastly_status;

    // header_values_set
    // in:  h, name, values
    // out: err
    pub extern "fastly_http_req" fn header_values_set(h: request_handle, name_ptr: [*]const u8, name_count: usize, values_ptr: [*]const char, values_count: usize) callconv(.C) fastly_status;

    // header_insert
    // in:  h, name, value
    // out: err
    pub extern "fastly_http_req" fn header_insert(h: request_handle, name_ptr: [*]const u8, name_count: usize, value_ptr: [*]const u8, value_count: usize) callconv(.C) fastly_status;

    // header_append
    // in:  h, name, value
    // out: err
    pub extern "fastly_http_req" fn header_append(h: request_handle, name_ptr: [*]const u8, name_count: usize, value_ptr: [*]const u8, value_count: usize) callconv(.C) fastly_status;

    // header_remove
    // in:  h, name
    // out: err
    pub extern "fastly_http_req" fn header_remove(h: request_handle, name_ptr: [*]const u8, name_count: usize) callconv(.C) fastly_status;

    // method_get
    // in:  h, buf, buf_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn method_get(h: request_handle, buf: [*]char, buf_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // method_set
    // in:  h, method
    // out: err
    pub extern "fastly_http_req" fn method_set(h: request_handle, method_ptr: [*]const char, method_len: usize) callconv(.C) fastly_status;

    // uri_get
    // in:  h, buf, buf_len
    // out: err, nwritten
    pub extern "fastly_http_req" fn uri_get(h: request_handle, buf: [*]char, buf_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // uri_set
    // in:  h, uri
    // out: err
    pub extern "fastly_http_req" fn uri_set(h: request_handle, uri_ptr: [*]const char, uri_len: usize) callconv(.C) fastly_status;

    // version_get
    // in:  h
    // out: err, version
    pub extern "fastly_http_req" fn version_get(h: request_handle, version_ptr: *http_version) callconv(.C) fastly_status;

    // version_set
    // in:  h, version
    // out: err
    pub extern "fastly_http_req" fn version_set(h: request_handle, version: http_version) callconv(.C) fastly_status;

    // send
    // in:  h, b, backend
    // out: err, resp, resp_body
    pub extern "fastly_http_req" fn send(h: request_handle, b: body_handle, backend_ptr: [*]const char, backend_len: usize, resp_ptr: *response_handle, resp_body_ptr: *body_handle) callconv(.C) fastly_status;

    // send_async
    // in:  h, b, backend
    // out: err, pending_req
    pub extern "fastly_http_req" fn send_async(h: request_handle, b: body_handle, backend_ptr: [*]const char, backend_len: usize, pending_req_ptr: *pending_request_handle) callconv(.C) fastly_status;

    // send_async_streaming
    // in:  h, b, backend
    // out: err, pending_req
    pub extern "fastly_http_req" fn send_async_streaming(h: request_handle, b: body_handle, backend_ptr: [*]const char, backend_len: usize, pending_req_ptr: *pending_request_handle) callconv(.C) fastly_status;

    // pending_req_poll
    // in:  h
    // out: err, is_done, resp, resp_body
    pub extern "fastly_http_req" fn pending_req_poll(h: pending_request_handle, is_done_ptr: *u32, resp_ptr: *response_handle, resp_body_ptr: *body_handle) callconv(.C) fastly_status;

    // pending_req_wait
    // in:  h
    // out: err, resp, resp_body
    pub extern "fastly_http_req" fn pending_req_wait(h: pending_request_handle, resp_ptr: *response_handle, resp_body_ptr: *body_handle) callconv(.C) fastly_status;

    // pending_req_select
    // in:  hs
    // out: err, done_idx, resp, resp_body
    pub extern "fastly_http_req" fn pending_req_select(hs_ptr: *const pending_request_handle, hs_count: usize, done_idx_ptr: *u32, resp_ptr: *response_handle, resp_body_ptr: *body_handle) callconv(.C) fastly_status;
};

// ----------------------[fastly_http_resp]----------------------

pub const mod_fastly_http_resp = struct {
    // new
    // in:
    // out: err, h
    pub extern "fastly_http_resp" fn new(h_ptr: *response_handle) callconv(.C) fastly_status;

    // header_names_get
    // in:  h, buf, buf_len, cursor, ending_cursor_out, nwritten_out
    // out: err
    pub extern "fastly_http_resp" fn header_names_get(h: response_handle, buf: [*]char, buf_len: usize, cursor: multi_value_cursor, ending_cursor_out: *i64, nwritten_out: *usize) callconv(.C) fastly_status;

    // header_value_get
    // in:  h, name, value, value_max_len
    // out: err, nwritten
    pub extern "fastly_http_resp" fn header_value_get(h: response_handle, name_ptr: [*]const u8, name_count: usize, value: [*]char, value_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;

    // header_values_get
    // in:  h, name, buf, buf_len, cursor, ending_cursor_out, nwritten_out
    // out: err
    pub extern "fastly_http_resp" fn header_values_get(h: response_handle, name_ptr: [*]const u8, name_count: usize, buf: [*]char, buf_len: usize, cursor: multi_value_cursor, ending_cursor_out: *i64, nwritten_out: *usize) callconv(.C) fastly_status;

    // header_values_set
    // in:  h, name, values
    // out: err
    pub extern "fastly_http_resp" fn header_values_set(h: response_handle, name_ptr: [*]const u8, name_count: usize, values_ptr: [*]const char, values_count: usize) callconv(.C) fastly_status;

    // header_insert
    // in:  h, name, value
    // out: err
    pub extern "fastly_http_resp" fn header_insert(h: response_handle, name_ptr: [*]const u8, name_count: usize, value_ptr: [*]const u8, value_count: usize) callconv(.C) fastly_status;

    // header_append
    // in:  h, name, value
    // out: err
    pub extern "fastly_http_resp" fn header_append(h: response_handle, name_ptr: [*]const u8, name_count: usize, value_ptr: [*]const u8, value_count: usize) callconv(.C) fastly_status;

    // header_remove
    // in:  h, name
    // out: err
    pub extern "fastly_http_resp" fn header_remove(h: response_handle, name_ptr: [*]const u8, name_count: usize) callconv(.C) fastly_status;

    // version_get
    // in:  h
    // out: err, version
    pub extern "fastly_http_resp" fn version_get(h: response_handle, version_ptr: *http_version) callconv(.C) fastly_status;

    // version_set
    // in:  h, version
    // out: err
    pub extern "fastly_http_resp" fn version_set(h: response_handle, version: http_version) callconv(.C) fastly_status;

    // send_downstream
    // in:  h, b, streaming
    // out: err
    pub extern "fastly_http_resp" fn send_downstream(h: response_handle, b: body_handle, streaming: u32) callconv(.C) fastly_status;

    // status_get
    // in:  h
    // out: err, status
    pub extern "fastly_http_resp" fn status_get(h: response_handle, status_ptr: *http_status) callconv(.C) fastly_status;

    // status_set
    // in:  h, status
    // out: err
    pub extern "fastly_http_resp" fn status_set(h: response_handle, status: http_status) callconv(.C) fastly_status;
};

// ----------------------[fastly_dictionary]----------------------

pub const mod_fastly_dictionary = struct {
    // open
    // in:  name
    // out: err, h
    pub extern "fastly_dictionary" fn open(name_ptr: [*]const char, name_len: usize, h_ptr: *dictionary_handle) callconv(.C) fastly_status;

    // get
    // in:  h, key, value, value_max_len
    // out: err, nwritten
    pub extern "fastly_dictionary" fn get(h: dictionary_handle, key_ptr: [*]const char, key_len: usize, value: [*]char, value_max_len: usize, nwritten_ptr: *usize) callconv(.C) fastly_status;
};
